import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {



     static final String resText = "-1";
    static String secureChannel(int operation, String message, String key) {
      
        switch (operation) {
            case 1:
                return encoded(message, key);
            case 2:
                return decoded(message, key);
            default:
                return resText;
        }
    }

     private static String isEmpty(String message, String key) {
        if (message == null || key == null)
            return resText;

        if (message.isEmpty() && key.isEmpty())
            return message;

        if (!message.isEmpty() && key.isEmpty())
            return message;

        if (message.isEmpty() && !key.isEmpty())
            return resText;


        return null;

    }

    private static String decoded(String message, String key) {
        String corner = isEmpty(message, key);
        if (corner != null)
            return corner;


        if (key.equals("0"))
            return message;

        int index = 0;
        final StringBuilder res = new StringBuilder();

        char keys[] = key.toCharArray();

        int i;
        for (i = 0; i < keys.length; i++) {

            if (index < message.length()) {
                char current = message.charAt(index);
                if (Character.isDigit(keys[i])) {
                    int keyV = keys[i] - '0';
                    int x = 1;
                    while (x + index < message.length() && message.charAt(x + index) == current) {

                        x++;
                    }

                    if (x == keyV) { //this is correct
                        res.append(current);
                    } else
                        return resText;
                    index = index + x;
                } else
                    return resText;

            } else
                break;
        }

        return getMessage(message, index, res, keys, i);


    }

    private static String getMessage(String message, int index, StringBuilder res, char[] keys, int i) {
        if (index < message.length()) {
            String remaining = message.substring(index);
            res.append(remaining);
        }
        return res.toString();

    }

    private static String encoded(String message, String key) {
        String corner = isEmpty(message, key);
        if (corner != null)
            return corner;

        int index = 0;
        final StringBuilder res = new StringBuilder();

        char keys[] = key.toCharArray();

        int i;
        for (i = 0; i < keys.length; i++) {

            if (index < message.length()) {
                char current = message.charAt(index);

                if (Character.isDigit(keys[i])) {
                    int keyV = keys[i] - '0';

                    for (int x = 0; x < keyV; x++) {
                        res.append(current);
                    }

                    index++;
                } else
                    return resText;
            } else
                break;

        }
        return getMessage(message, index, res, keys, i);
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int operation = Integer.parseInt(bufferedReader.readLine().trim());

        String message = bufferedReader.readLine();

        String key = bufferedReader.readLine();

        String res = secureChannel(operation, message, key);

        bufferedWriter.write(res);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
